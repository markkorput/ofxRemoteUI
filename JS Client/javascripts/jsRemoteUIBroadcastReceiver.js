// Generated by CoffeeScript 1.6.3
(function() {
  this.jsRemoteUIBroadcastReceiver = (function() {
    function jsRemoteUIBroadcastReceiver(_opts) {
      var _this = this;
      this.options = _opts || {};
      this.socket = this.options.socket;
      this.remotes = new Backbone.Collection();
      this.socket.on('connect', function() {
        _this.socket.emit('config', {
          listen: {
            port: _this.options.port,
            host: '127.0.0.1'
          }
        });
        return _this.socket.on('message-127.0.0.1:' + _this.options.port, function(obj) {
          if (obj.data && obj.info && obj.data[2] && obj.data[2]) {
            return _this.parsePing({
              ip: obj.info.address,
              port: obj.data[2][1],
              computerName: obj.data[2][2],
              binaryName: obj.data[2][3],
              broadcastSequenceNumber: obj.data[2][4]
            });
          }
        });
      });
    }

    jsRemoteUIBroadcastReceiver.prototype.update = function() {};

    jsRemoteUIBroadcastReceiver.prototype.draw = function() {};

    jsRemoteUIBroadcastReceiver.prototype.parsePing = function(data) {
      var remote;
      if (remote = this.remotes.findWhere({
        ip: data.ip,
        port: data.port
      })) {
        if (data.broadcastSequenceNumber < remote.get('broadcastSequenceNumber')) {
          console.log("Existing remote restarted: ", data);
          this.remotes.remove(remote);
          data.lastSeen = new Date();
          this.remotes.add(data);
          return;
        }
        remote.set({
          lastSeen: new Date(),
          broadcastSequenceNumber: data.broadcastSequenceNumber
        });
        return;
      }
      console.log("New remote: ", data);
      data.lastSeen = new Date();
      return this.remotes.add(data);
    };

    return jsRemoteUIBroadcastReceiver;

  })();

}).call(this);
