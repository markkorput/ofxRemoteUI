// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.oscReceiver = (function(_super) {
    __extends(oscReceiver, _super);

    function oscReceiver() {
      _ref = oscReceiver.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    oscReceiver.prototype.initialize = function() {
      this.socket = this.get('socket');
      return this.start();
    };

    oscReceiver.prototype.start = function() {
      var _this = this;
      this.socket.emit('config', {
        listen: {
          id: this.cid,
          port: this.get('port'),
          host: this.get('host')
        }
      });
      return this.socket.on('message-' + this.cid, function(obj) {
        return _this.trigger('message', obj);
      });
    };

    return oscReceiver;

  })(Backbone.Model);

  this.oscSender = (function(_super) {
    __extends(oscSender, _super);

    function oscSender() {
      _ref1 = oscSender.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    oscSender.prototype.initialize = function() {
      this.socket = this.get('socket');
      return this.start();
    };

    oscSender.prototype.start = function() {
      return this.socket.emit('config', {
        sender: {
          id: this.cid,
          port: this.get('port'),
          host: this.get('host')
        }
      });
    };

    oscSender.prototype.send = function(obj) {
      return this.socket.emit('message-' + this.cid, obj);
    };

    return oscSender;

  })(Backbone.Model);

}).call(this);
