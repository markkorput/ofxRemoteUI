// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.ParamModel = (function(_super) {
    __extends(ParamModel, _super);

    function ParamModel() {
      _ref = ParamModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ParamModel.prototype.initialize = function() {
      return console.log('param initializing');
    };

    return ParamModel;

  })(Backbone.Model);

  this.ParamsCollection = (function(_super) {
    __extends(ParamsCollection, _super);

    function ParamsCollection() {
      _ref1 = ParamsCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ParamsCollection.prototype.model = ParamModel;

    return ParamsCollection;

  })(Backbone.Collection);

  this.GroupModel = (function(_super) {
    __extends(GroupModel, _super);

    function GroupModel() {
      _ref2 = GroupModel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    GroupModel.prototype.initialize = function() {
      console.log("group initing");
      return this.params = new ParamsCollection();
    };

    return GroupModel;

  })(Backbone.Model);

  this.GroupsCollection = (function(_super) {
    __extends(GroupsCollection, _super);

    function GroupsCollection() {
      _ref3 = GroupsCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    GroupsCollection.prototype.model = GroupModel;

    return GroupsCollection;

  })(Backbone.Collection);

  this.Session = (function(_super) {
    __extends(Session, _super);

    function Session() {
      _ref4 = Session.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Session.prototype.initialize = function() {
      this.groups = new GroupsCollection();
      return this.receivingGroup = this.groups.add({
        name: "Groupless"
      });
    };

    Session.prototype.connect = function() {
      var _this = this;
      this.sender = new oscSender({
        socket: this.get('socket'),
        host: this.get('remote').get('ip'),
        port: this.get('remote').get('port')
      });
      this.listener = new oscReceiver({
        socket: this.get('socket'),
        port: this.get('remote').get('port') + 1,
        host: this.get('remote').get('ip')
      });
      this.listener.on('message', function(incoming) {
        var group, msg, param;
        console.log("session incoming: ", incoming);
        msg = new jsRemoteUIMessage(incoming);
        switch (msg.type()) {
          case "SENDSPA":
            group = _this.groups.find(msg.sendSpaId());
            group || (group = _this.groups.add({
              id: msg.sendSpaId(),
              name: msg.sendSpaName()
            }));
            return _this.receivingGroup = group;
          case "SENDPARAM":
            param = _this.receivingGroup.params.findWhere({
              name: msg.paramName()
            });
            param || (param = _this.receivingGroup.params.add({
              name: msg.paramName()
            }));
            param.set({
              value: msg.paramValue(),
              type: msg.paramType()
            });
            if (msg.paramType() === 'INT') {
              return param.set({
                minValue: msg.paramMinValue(),
                maxValue: msg.paramMaxValue()
              });
            }
        }
      });
      return this.requestCompleteUpdate();
    };

    Session.prototype.requestCompleteUpdate = function() {
      console.log("sending REQU");
      return this.sender.send('REQU', '');
    };

    return Session;

  })(Backbone.Model);

  this.SessionsCollection = (function(_super) {
    __extends(SessionsCollection, _super);

    function SessionsCollection() {
      _ref5 = SessionsCollection.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    SessionsCollection.prototype.model = Session;

    SessionsCollection.prototype.initialize = function() {
      var _this = this;
      return this.on('add', function(session) {});
    };

    return SessionsCollection;

  })(Backbone.Collection);

}).call(this);
